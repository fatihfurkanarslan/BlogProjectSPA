{"ast":null,"code":"import _defineProperty from \"C:/Users/Fatih Furkan Arslan/Desktop/Github/BlogProject-SPA/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport axios from 'axios';\nimport { NoteService } from 'src/app/services/note.service';\nimport { CategoryService } from './../../services/category.service';\nimport { AuthService } from './../../services/auth.service';\nimport { Note } from 'src/app/models/note';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { SnackbarComponent } from './../../snackbar/snackbar.component';\nimport { Router } from '@angular/router';\n//import { AngularEditorConfig } from '@kolkov/angular-editor';\nimport EditorJS from '@editorjs/editorjs';\nimport Header from '@editorjs/header';\nimport ImageTool from '@editorjs/image';\nimport { debounce } from 'lodash';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/note.service\";\nimport * as i2 from \"./../../services/category.service\";\nimport * as i3 from \"./../../services/auth.service\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"@angular/common/http\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@angular/material/button\";\nvar saveStatus = /*#__PURE__*/(() => {\n  (function (saveStatus) {\n    saveStatus[saveStatus[\"saving\"] = 1] = \"saving\";\n    saveStatus[saveStatus[\"saved\"] = 2] = \"saved\";\n    saveStatus[saveStatus[\"idle\"] = 3] = \"idle\";\n  })(saveStatus || (saveStatus = {}));\n  return saveStatus;\n})();\nexport let EditnoteComponent = /*#__PURE__*/(() => {\n  class EditnoteComponent {\n    constructor(noteService, categoryService, authService, _snackBar, router, httpClient) {\n      _defineProperty(this, \"noteService\", void 0);\n      _defineProperty(this, \"categoryService\", void 0);\n      _defineProperty(this, \"authService\", void 0);\n      _defineProperty(this, \"_snackBar\", void 0);\n      _defineProperty(this, \"router\", void 0);\n      _defineProperty(this, \"httpClient\", void 0);\n      _defineProperty(this, \"categories\", []);\n      _defineProperty(this, \"selectedOption\", {});\n      _defineProperty(this, \"userId\", {});\n      _defineProperty(this, \"noteId\", {});\n      _defineProperty(this, \"imageList\", []);\n      _defineProperty(this, \"durationInSeconds\", 3);\n      _defineProperty(this, \"editor\", void 0);\n      _defineProperty(this, \"editorObserver\", void 0);\n      _defineProperty(this, \"editorData\", void 0);\n      _defineProperty(this, \"parsedData\", void 0);\n      _defineProperty(this, \"HtmlData\", \"\");\n      _defineProperty(this, \"note\", void 0);\n      _defineProperty(this, \"extendedDebounceHandler\", debounce(() => {\n        // if(localStorage.getItem('noteId') == null){\n        //   console.log(\"if bloÄŸunda..\" + localStorage.getItem('noteId'));\n        //   this.note.userId = this.userId;\n        //   this.note.isDraft = true;\n        //   this.note.categoryId = 1;\n        //   //console.log(\"localstore getitem worked..\" + localStorage.getItem('noteId'));\n        //   this.noteService.draftNote(this.note).subscribe(id => {\n        //     this.noteId = id;\n        //     localStorage.setItem('noteId', this.noteId);\n        //    },\n        //      error => {\n        //        console.log('note id service failed');\n        //      });\n        //     }else{\n        console.log('saving in editnote');\n        this.SaveDraft();\n        // }\n      }, 3000));\n      this.noteService = noteService;\n      this.categoryService = categoryService;\n      this.authService = authService;\n      this._snackBar = _snackBar;\n      this.router = router;\n      this.httpClient = httpClient;\n      this.note = new Note();\n    }\n    //   editorConfig: AngularEditorConfig = {\n    //     editable: true,\n    //       spellcheck: true,\n    //       height: 'auto',\n    //       minHeight: '0',\n    //       maxHeight: 'auto',\n    //       width: 'auto',\n    //       minWidth: '0',\n    //       translate: 'yes',\n    //       enableToolbar: true,\n    //       showToolbar: true,\n    //       placeholder: 'Enter text here...',\n    //       defaultParagraphSeparator: '',\n    //       defaultFontName: '',\n    //       defaultFontSize: '',\n    //       fonts: [\n    //         {class: 'arial', name: 'Arial'},\n    //         {class: 'times-new-roman', name: 'Times New Roman'},\n    //         {class: 'calibri', name: 'Calibri'},\n    //         {class: 'comic-sans-ms', name: 'Comic Sans MS'}\n    //       ],\n    //       customClasses: [\n    //       {\n    //         name: 'quote',\n    //         class: 'quote',\n    //       },\n    //       {\n    //         name: 'redText',\n    //         class: 'redText'\n    //       },\n    //       {\n    //         name: 'titleText',\n    //         class: 'titleText',\n    //         tag: 'h1',\n    //       },\n    //     ],\n    //     uploadUrl: 'https://localhost:44369/api/photo/insertphotonote',\n    // };\n    // options: Object = {\n    //   charCounterCount: false,\n    //   placeholderText: 'Edit Your Content Here!',\n    //   imageUpload: true,\n    //   imageDefaultAlign: 'left',\n    //   imageDefaultDisplay: 'inline-block',\n    //   pastePlain: true,\n    //   heightMin: 150,\n    //   // Set max image size to 3MB.\n    //   imageMaxSize: 3 * 1024 * 1024,\n    //   // Allow to upload PNG and JPG.\n    //   imageAllowedTypes: ['jpeg', 'jpg', 'png'],\n    //   events: {\n    //     'froalaEditor.image.beforeUpload': function(e, editor, images) {\n    //       // Before image is uploaded\n    //       const noteId = localStorage.getItem('noteId');\n    //       const data = new FormData();\n    //       data.append('File', images[0]);\n    //       data.append('NoteId', noteId);\n    //       axios.post('https://localhost:44369/api/photo/insert', data, {\n    //         headers: {\n    //           'accept': 'application/json',\n    //           'Content-Type': 'multipart/form-data'\n    //         }\n    //       }).then(res => {\n    //         // console.log(res.data);\n    //          editor.image.insert(res.data, null, null, editor.image.get());\n    //          // this.imageList.push(res.data);\n    //          console.log('noteId of photo is ' + this.noteId);\n    //       }).catch(err => {\n    //         console.log(err);\n    //       });\n    //       return false;\n    //     }\n    //   }\n    // };\n    ngOnInit() {\n      this.userId = this.authService.decodedToken.nameid;\n      // tslint:disable-next-line:prefer-const\n      this.httpClient.get(\"http://api.ipify.org/?format=json\").subscribe(res => {\n        this.note.IPAddress = \"\" + res.ip;\n        console.log(\"idadress : \" + this.note.IPAddress);\n      });\n      // this.noteToInsert.userId = this.userId;\n      // this.noteToInsert.isDraft = true;\n      this.editor = new EditorJS({\n        holder: 'editor-js',\n        tools: {\n          header: {\n            class: Header,\n            inlineToolbar: ['link']\n          },\n          // code: CodeTool\n          // ,\n          image: {\n            class: ImageTool,\n            config: {\n              // endpoints: {\n              //   byFile: 'https://localhost:44369/api/photo/insertphotonote' // Your backend file uploader endpoint\n              // },\n              uploader: {\n                /**\r\n                * Upload file to the server and return an uploaded image data\r\n                * @param {File} file - file selected from the device or pasted by drag-n-drop\r\n                * @return {Promise.<{success, file: {url}}>}\r\n                */\n                uploadByFile(file) {\n                  this.noteId = localStorage.getItem('noteId');\n                  const data = new FormData();\n                  data.append('File', file);\n                  data.append('NoteId', this.noteId);\n                  data.append('MainPhoto', 'false');\n                  console.log('file -->' + file);\n                  return axios.post('https://localhost:44369/api/photo/insertphotonote', data, {\n                    headers: {\n                      'accept': 'application/json',\n                      'Content-Type': 'multipart/form-data'\n                    }\n                  }).then(res => {\n                    return {\n                      success: 1,\n                      file: {\n                        url: res.data\n                        // any other image data you want to store, such as width, height, color, extension, etc\n                      }\n                    };\n                  });\n                },\n\n                /**\r\n                * @param {string} url - pasted image URL\r\n                * @return {Promise.<{success, file: {url}}>}\r\n                */\n                uploadByUrl(url) {\n                  // your ajax request for uploading\n                  this.noteId = localStorage.getItem('noteId');\n                  const data = new FormData();\n                  data.append('File', url);\n                  data.append('NoteId', this.noteId);\n                  data.append('MainPhoto', 'false');\n                  console.log('url -->' + url);\n                  return this.http.post('https://localhost:44369/api/photo/insertphotonote', data, {\n                    headers: {\n                      'accept': 'application/json',\n                      'Content-Type': 'multipart/form-data'\n                    }\n                  }).then(res => {\n                    return {\n                      success: 1,\n                      file: {\n                        url: res.data\n                        // any other image data you want to store, such as width, height, color, extension, etc\n                      }\n                    };\n                  });\n                }\n              }\n            }\n          }\n        },\n\n        // data: {\n        //   \"time\": 1550476186479,\n        //   \"blocks\": [\n        //      {\n        //       type: 'paragraph',\n        //       data: {\n        //        text: 'Hello world'\n        //       }\n        //      }\n        //   ]\n        // },\n        onReady: () => {\n          let noteId = localStorage.getItem('editNoteId');\n          console.log(\"noteid \" + noteId);\n          // this.categoryService.getCategories().subscribe((categoryList: Category[]) => {this.categories = categoryList; },\n          // error => {\n          //   console.log('category service failed');\n          // });\n          this.noteService.getNote(+noteId).subscribe(result => {\n            this.note = result;\n            console.log(\"raw text in edit page\" + this.note.rawText);\n            this.editorData = this.note.rawText;\n            console.log(this.userId);\n            let parsedData = JSON.parse(this.editorData);\n            // console.log(\"parsed data : \" + parsedData);\n            this.editor.render(parsedData);\n            //   for (const entry of Object.entries(parsedData)) {\n            //    console.log(\"parsed data : \" + entry[1]);\n            //    console.log(\"parsed data key: \" + Object.values(parsedData));\n            //  //   if(key === 'blocks'){\n            //   this.editor.blocks.render({\n            //  \"blocks\": entry[1]\n            //  });\n            //  //   }\n            //  }\n          });\n          //this.userId = this.authService.decodedToken.nameid;\n          // for (var blok in JSON.parse(this.editorData.blocks)) {\n          //   console.log(\"inside of for loop\");\n          //   if (this.editorData.blocks.hasOwnProperty(blok)){\n          //       console.log(\"block data --> \" + this.editorData.blocks[blok]);\n          //   }\n          //   // console.log(\"block data : \" + this.editorData.blocks[i]);\n          //   //  this.editor.blocks.insert({\n          //   //   type: \"image\",\n          //   //   data: {\n          //   //     url: \"https://cdn.pixabay.com/photo/2017/09/01/21/53/blue-2705642_1280.jpg\"\n          //   //   }\n          //   // });\n          //   }\n          // this.editor.blocks.render({\n          // blocks: [\n          //   {\n          //     type: \"image\",\n          //     data: {\n          //       url: \"https://cdn.pixabay.com/photo/2017/09/01/21/53/blue-2705642_1280.jpg\"\n          //     }\n          //   },\n          //   {\n          //     type: \"header\",\n          //     data: {\n          //        text: \"New header\",\n          //        level: 2\n          //     }\n          //   }\n          // ]\n          // this.editor.blocks.render(this.blocks);\n        },\n\n        onChange: () => {\n          console.log(\"onchange e girdi\");\n          this.saveEditorData();\n          this.extendedDebounceHandler();\n        }\n      });\n      // this.editor.blocks.insert(this.editorData);\n      // this.addBlocks();\n    }\n\n    saveEditorData() {\n      this.editor.save().then(outputData => {\n        this.editorData = JSON.stringify(outputData, null, 2);\n        console.log(\"*editordata : \" + this.editorData);\n        let parsedData = JSON.parse(this.editorData);\n        for (let i = 0; i < parsedData.blocks.length; i++) {\n          let block = parsedData.blocks[i];\n          if (block.type === 'header') {\n            this.HtmlData += '<header><h1>' + block.data.text + '</h1></header>';\n          }\n          if (block.type === 'paragraph') {\n            this.HtmlData += '<p>' + block.data.text + '</p>';\n          }\n          if (block.type === 'image') {\n            this.HtmlData += '<img src=\"' + block.data.file.url + '\">';\n          }\n          // console.log(\"HtmlData : \" + this.HtmlData);\n        }\n      });\n    }\n    // JsonToHtml() {\n    //   let parsedData = JSON.parse(this.editorData);\n    //   for (let i = 0; i < parsedData.blocks.length; i++) {\n    //     let block = parsedData.blocks[i];\n    //       if(block.type === 'header'){\n    //         this.HtmlData += '<header><h1>' + block.data.text + '</h1></header>';\n    //       }\n    //       if(block.type === 'paragraph'){\n    //         this.HtmlData += '<p>'+block.data.text+'</p>';\n    //       }\n    //       if(block.type === 'image'){\n    //         this.HtmlData += '<img src=\"' + block.data.file.url + '\">';\n    //       }\n    //     }\n    //   }\n    // saveEditorData() : void {\n    //   this.editor.save().then((outputData) => {\n    //     this.editorData =  JSON.stringify(outputData, null, 2);\n    //     // for(var block of JSON.parse(this.editorData)){\n    //     //   this.editor.blocks.insert(block);\n    //     //  }\n    //     // console.log(\"detectEditorChanges in saveEditorData : \" + this.editorData);\n    //     // this.editor.render(outputData);\n    //   })\n    // }\n    ngOnDestroy() {\n      //this.editorObserver.disconnect();\n    }\n    // detectEditorChanges(): Observable <any> {\n    //   return new Observable(observer => {\n    //     const editorDom = document.querySelector('#editor-js');\n    //     const config = { attributes: true, childList: true, subtree: true };\n    //     this.editorObserver = new MutationObserver((mutation) => {\n    //       observer.next(mutation);\n    //     })\n    //     this.editorObserver.observe(editorDom, config);\n    //   })\n    // }\n    onSubmit() {\n      // tslint:disable-next-line:prefer-const\n      let noteId = localStorage.getItem('editNoteId');\n      const images = $('img').map(function () {\n        return $(this).attr('src').toString();\n      });\n      for (let i = 0; i < images.length; i++) {\n        this.imageList.push(images[i].toString());\n      }\n      //this.saveEditorData();\n      // console.log(this.tagList + ' fskdfs');\n      // $('img').map();\n      // this.imageList.push($('img').prop('src'));\n      // for (let i = 0; i < imgArray.length; i++) {\n      //   this.noteToInsert.photos[i] = imgArray[i];\n      //     }\n      // console.log('photooo ' + this.noteToInsert.photos[0]);\n      // this.noteToInsert.photos.push();\n      //this.noteToInsert.categoryId = this.selectedOption;\n      this.note.userId = this.userId;\n      this.note.photos = this.imageList;\n      this.note.isDraft = false;\n      this.note.text = this.HtmlData;\n      this.note.rawText = this.editorData;\n      this.note.id = +noteId;\n      //  console.log(\"*editordata : \" + this.editorData);\n      //  console.log(\"*parseddata : \" + this.parsedData);\n      // console.log('tags : ' + this.tags);\n      this.noteService.updateNote(this.note).subscribe(data => {\n        console.log('success to update note');\n      }, error => {\n        console.log('failed to update note');\n      });\n      this.router.navigate(['/createtags']);\n    }\n    SaveDraft() {\n      // tslint:disable-next-line:prefer-const\n      let noteId = localStorage.getItem('editNoteId');\n      //this.saveEditorData();\n      const images = $('img').map(function () {\n        return $(this).attr('src').toString();\n      });\n      for (let i = 0; i < images.length; i++) {\n        this.imageList.push(images[i].toString());\n      }\n      // $('img').map();\n      // this.imageList.push($('img').prop('src'));\n      // for (let i = 0; i < imgArray.length; i++) {\n      //   this.noteToInsert.photos[i] = imgArray[i];\n      //     }\n      // console.log('photooo ' + this.noteToInsert.photos[0]);\n      // this.noteToInsert.photos.push();\n      // this.noteToInsert.categoryId = this.selectedOption;\n      this.note.userId = this.userId;\n      this.note.photos = this.imageList;\n      this.note.isDraft = true;\n      this.note.id = +noteId;\n      this.note.text = this.HtmlData;\n      this.note.rawText = this.editorData;\n      //console.log(\"this.noteToInsert.rawText : \" + this.editorData);\n      // this.noteToInsert.tags = this.tags;\n      // console.log('tags : ' + this.tags);\n      this.noteService.updateNote(this.note).subscribe(data => {\n        //this.router.navigate(['/usernotes']);\n        //console.log('successed to update note');\n        this.openSnackBarDraft();\n      }, error => {\n        console.log('failed to update note');\n      });\n    }\n    openSnackBar() {\n      this._snackBar.openFromComponent(SnackbarComponent, {\n        duration: this.durationInSeconds * 1000,\n        verticalPosition: 'top'\n      });\n    }\n    openSnackBarDraft() {\n      this._snackBar.openFromComponent(SnackbarComponent, {\n        duration: this.durationInSeconds * 1000,\n        verticalPosition: 'top'\n      });\n    }\n    getIPAddress() {}\n  }\n  _defineProperty(EditnoteComponent, \"\\u0275fac\", function EditnoteComponent_Factory(t) {\n    return new (t || EditnoteComponent)(i0.ÉµÉµdirectiveInject(i1.NoteService), i0.ÉµÉµdirectiveInject(i2.CategoryService), i0.ÉµÉµdirectiveInject(i3.AuthService), i0.ÉµÉµdirectiveInject(i4.MatSnackBar), i0.ÉµÉµdirectiveInject(i5.Router), i0.ÉµÉµdirectiveInject(i6.HttpClient));\n  });\n  _defineProperty(EditnoteComponent, \"\\u0275cmp\", /*@__PURE__*/i0.ÉµÉµdefineComponent({\n    type: EditnoteComponent,\n    selectors: [[\"app-editnote\"]],\n    decls: 9,\n    vars: 0,\n    consts: [[\"id\", \"editForm\", 1, \"example-container\", 3, \"ngSubmit\"], [\"editForm\", \"ngForm\"], [1, \"articleEditor\"], [\"id\", \"editor-js\", \"name\", \"text\"], [1, \"row\"], [\"mat-raised-button\", \"\", 1, \"action_btn\", 3, \"ngSubmit\"]],\n    template: function EditnoteComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ÉµÉµelementStart(0, \"form\", 0, 1);\n        i0.ÉµÉµlistener(\"ngSubmit\", function EditnoteComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ÉµÉµelementStart(2, \"div\", 2);\n        i0.ÉµÉµelement(3, \"div\", 3);\n        i0.ÉµÉµelementEnd();\n        i0.ÉµÉµelement(4, \"br\");\n        i0.ÉµÉµelementStart(5, \"div\", 4);\n        i0.ÉµÉµtext(6, \" \\u00A0\\u00A0\\u00A0 \");\n        i0.ÉµÉµelementStart(7, \"button\", 5);\n        i0.ÉµÉµlistener(\"ngSubmit\", function EditnoteComponent_Template_button_ngSubmit_7_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ÉµÉµtext(8, \" Post \");\n        i0.ÉµÉµelementEnd()()();\n      }\n    },\n    dependencies: [i7.ÉµNgNoValidate, i7.NgControlStatusGroup, i7.NgForm, i8.MatButton],\n    styles: [\".example-container[_ngcontent-%COMP%]{display:flex;flex-direction:column}.example-container[_ngcontent-%COMP%] > input[_ngcontent-%COMP%]{width:100%}.action_btn[_ngcontent-%COMP%]{width:auto;margin:0 auto}\"]\n  }));\n  return EditnoteComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}