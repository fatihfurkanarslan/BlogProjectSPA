{"ast":null,"code":"import _defineProperty from \"C:/Users/Fatih Furkan Arslan/Desktop/Github/BlogProject-SPA/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Note } from 'src/app/models/note';\nimport * as $ from 'jquery';\n// import CKFinder from '@ckeditor/ckeditor5-ckfinder/src/ckfinder';\n// import { BehaviorSubject, throwError } from 'rxjs';\nimport axios from 'axios';\nimport { NoteService } from 'src/app/services/note.service';\nimport { AuthService } from './../../services/auth.service';\n// import { Photo } from 'src/app/models/photo';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { SnackbarComponent } from './../../snackbar/snackbar.component';\nimport { Router } from '@angular/router';\nimport EditorJS from '@editorjs/editorjs';\nimport Header from '@editorjs/header';\nimport ImageTool from '@editorjs/image';\nimport { debounce } from 'lodash';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/note.service\";\nimport * as i2 from \"./../../services/auth.service\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"@angular/common/http\";\nimport * as i5 from \"@angular/router\";\nexport let CreatenoteComponent = /*#__PURE__*/(() => {\n  class CreatenoteComponent {\n    //autosaving\n    constructor(noteService, authService, _snackBar, httpClient, router) {\n      _defineProperty(this, \"noteService\", void 0);\n      _defineProperty(this, \"authService\", void 0);\n      _defineProperty(this, \"_snackBar\", void 0);\n      _defineProperty(this, \"httpClient\", void 0);\n      _defineProperty(this, \"router\", void 0);\n      _defineProperty(this, \"noteToInsert\", new Note());\n      _defineProperty(this, \"userId\", {});\n      _defineProperty(this, \"noteId\", {});\n      _defineProperty(this, \"imageList\", []);\n      _defineProperty(this, \"durationInSeconds\", 3);\n      // tslint:disable-next-line:no-inferrable-types\n      _defineProperty(this, \"fired\", false);\n      _defineProperty(this, \"tagList\", []);\n      _defineProperty(this, \"editor\", void 0);\n      _defineProperty(this, \"editorObserver\", void 0);\n      _defineProperty(this, \"editorData\", void 0);\n      _defineProperty(this, \"parsedData\", void 0);\n      _defineProperty(this, \"HtmlData\", \"\");\n      _defineProperty(this, \"timer\", 2);\n      _defineProperty(this, \"savingEditor\", false);\n      _defineProperty(this, \"extendedDebounceHandler\", debounce(() => {\n        if (localStorage.getItem('noteId') == null) {\n          console.log(\"if bloğunda..\" + localStorage.getItem('noteId'));\n          this.noteToInsert.userId = this.userId;\n          this.noteToInsert.isDraft = true;\n          this.noteToInsert.categoryId = 1;\n          //console.log(\"localstore getitem worked..\" + localStorage.getItem('noteId'));\n          this.noteService.draftNote(this.noteToInsert).subscribe(id => {\n            this.noteId = id;\n            localStorage.setItem('noteId', this.noteId);\n          }, error => {\n            console.log('note id service failed');\n          });\n        } else {\n          console.log('else bloğunda');\n          this.SaveDraft();\n        }\n      }, 3000));\n      _defineProperty(this, \"saveEditorData\", debounce(() => {\n        this.editor.save().then(outputData => {\n          this.editorData = JSON.stringify(outputData, null, 2);\n          console.log(\"*editordata : \" + this.editorData);\n          let parsedData = JSON.parse(this.editorData);\n          for (let i = 0; i < parsedData.blocks.length; i++) {\n            let block = parsedData.blocks[i];\n            if (block.type === 'header') {\n              this.HtmlData += '<header><h1>' + block.data.text + '</h1></header>';\n            }\n            if (block.type === 'paragraph') {\n              this.HtmlData += '<p>' + block.data.text + '</p>';\n            }\n            if (block.type === 'image') {\n              this.HtmlData += '<img src=\"' + block.data.file.url + '\">';\n            }\n            // console.log(\"HtmlData : \" + this.HtmlData);\n          }\n        });\n      }, 1000));\n      this.noteService = noteService;\n      this.authService = authService;\n      this._snackBar = _snackBar;\n      this.httpClient = httpClient;\n      this.router = router;\n    }\n    //    editorConfig: AngularEditorConfig = {\n    //     editable: true,\n    //       spellcheck: true,\n    //       height: 'auto',\n    //       minHeight: '0',\n    //       maxHeight: 'auto',\n    //       width: 'auto',\n    //       minWidth: '0',\n    //       translate: 'yes',\n    //       enableToolbar: true,\n    //       showToolbar: true,\n    //       placeholder: 'Enter text here...',\n    //       defaultParagraphSeparator: '',\n    //       defaultFontName: '',\n    //       defaultFontSize: '',\n    //       fonts: [\n    //         {class: 'arial', name: 'Arial'},\n    //         {class: 'times-new-roman', name: 'Times New Roman'},\n    //         {class: 'calibri', name: 'Calibri'},\n    //         {class: 'comic-sans-ms', name: 'Comic Sans MS'}\n    //       ],\n    //       customClasses: [\n    //       {\n    //         name: 'quote',\n    //         class: 'quote',\n    //       },\n    //       {\n    //         name: 'redText',\n    //         class: 'redText'\n    //       },\n    //       {\n    //         name: 'titleText',\n    //         class: 'titleText',\n    //         tag: 'h1',\n    //       },\n    //     ],\n    //      uploadUrl: 'https://localhost:44369/api/photo/insertphotonote'\n    //     //  upload: (file: File) => { Observable<HttpEvent<UploadResponse>>\n    //     //     const url = `https://localhost:44369/api/photo/insertphotonote`;\n    //     //     const formData: FormData = new FormData();\n    //     //     const noteId = localStorage.getItem('noteId');\n    //     //     formData.append('File', file);\n    //     //     formData.append('NoteId', noteId);\n    //     //     formData.append('MainPhoto', 'false');\n    //     //     return axios.post(url, formData, {headers: {\n    //     //             'accept': 'application/json',\n    //     //             'Content-Type': 'multipart/form-data'\n    //     //     }}).then();\n    //     //   const noteId = localStorage.getItem('noteId');\n    //     //         const data = new FormData();\n    //     //         data.append('File', file);\n    //     //         data.append('NoteId', noteId);\n    //     //         data.append('MainPhoto', 'false');\n    //             // // axios.post<UploadResponse>('https://localhost:44369/api/photo/insertphotonote', formData, {\n    //             // //   headers: {\n    //             // //     'accept': 'application/json',\n    //             // //     'Content-Type': 'multipart/form-data'\n    //             // //   }\n    //             // // }).then(res => {\n    //             // //   // console.log(res.data);\n    //             // //   //editor.image.insert(res.data, null, null, editor.image.get());\n    //             // //    // this.imageList.push(res.data);\n    //             // //    console.log('noteId of photo is ' + this.noteId);\n    //             // // }).catch(err => {\n    //             // //   console.log(err);\n    //             // // });\n    // };\n    // options: Object = {\n    //   charCounterCount: false,\n    //   placeholderText: 'Edit Your Content Here!',\n    //   imageUpload: true,\n    //   imageDefaultAlign: 'left',\n    //   imageDefaultDisplay: 'inline-block',\n    //   pastePlain: true,\n    //   heightMin: 150,\n    //   // Set max image size to 3MB.\n    //   imageMaxSize: 3 * 1024 * 1024,\n    //   // Allow to upload PNG and JPG.\n    //   imageAllowedTypes: ['jpeg', 'jpg', 'png'],\n    //    toolbarButtons: [ 'bold', 'italic', 'underline', 'subscript', 'superscript', 'fontFamily', 'align', 'orderedList',\n    //    'unorderedList', 'quote', 'fontSize', 'insertLink', 'insertImage', 'specialCharacters', 'html', 'undo', 'redo'],\n    //   events: {\n    //     'froalaEditor.image.beforeUpload': function(e, editor, images) {\n    //       // Before image is uploaded\n    //       const noteId = localStorage.getItem('noteId');\n    //       const data = new FormData();\n    //       data.append('File', images[0]);\n    //       data.append('NoteId', noteId);\n    //       data.append('MainPhoto', 'false');\n    //       axios.post('https://localhost:44369/api/photo/insertphotonote', data, {\n    //         headers: {\n    //           'accept': 'application/json',\n    //           'Content-Type': 'multipart/form-data'\n    //         }\n    //       }).then(res => {\n    //         // console.log(res.data);\n    //          editor.image.insert(res.data, null, null, editor.image.get());\n    //          // this.imageList.push(res.data);\n    //          console.log('noteId of photo is ' + this.noteId);\n    //       }).catch(err => {\n    //         console.log(err);\n    //       });\n    //       return false;\n    //     }\n    //   }\n    // };\n    ngOnInit() {\n      this.userId = this.authService.decodedToken.nameid;\n      this.httpClient.get(\"http://api.ipify.org/?format=json\").subscribe(res => {\n        this.noteToInsert.IPAddress = \"\" + res.ip;\n        console.log(\"idadress : \" + this.noteToInsert.IPAddress);\n      });\n      this.editor = new EditorJS({\n        holder: 'editor-js',\n        tools: {\n          header: {\n            class: Header,\n            inlineToolbar: ['link']\n          },\n          image: {\n            class: ImageTool,\n            config: {\n              // endpoints: {\n              //   byFile: 'https://localhost:44369/api/photo/insertphotonote' // Your backend file uploader endpoint\n              // },\n              uploader: {\n                /**\r\n                * Upload file to the server and return an uploaded image data\r\n                * @param {File} file - file selected from the device or pasted by drag-n-drop\r\n                * @return {Promise.<{success, file: {url}}>}\r\n                */\n                uploadByFile(file) {\n                  this.noteId = localStorage.getItem('noteId');\n                  const data = new FormData();\n                  data.append('File', file);\n                  data.append('NoteId', this.noteId);\n                  data.append('MainPhoto', 'false');\n                  console.log('file -->' + file);\n                  return axios.post('https://localhost:44369/api/photo/insertphotonote', data, {\n                    headers: {\n                      'accept': 'application/json',\n                      'Content-Type': 'multipart/form-data'\n                    }\n                  }).then(res => {\n                    return {\n                      success: 1,\n                      file: {\n                        url: res.data\n                        // any other image data you want to store, such as width, height, color, extension, etc\n                      }\n                    };\n                  });\n                },\n\n                /**\r\n                * @param {string} url - pasted image URL\r\n                * @return {Promise.<{success, file: {url}}>}\r\n                */\n                uploadByUrl(url) {\n                  // your ajax request for uploading\n                  this.noteId = localStorage.getItem('noteId');\n                  const data = new FormData();\n                  data.append('File', url);\n                  data.append('NoteId', this.noteId);\n                  data.append('MainPhoto', 'false');\n                  console.log('url -->' + url);\n                  return this.http.post('https://localhost:44369/api/photo/insertphotonote', data, {\n                    headers: {\n                      'accept': 'application/json',\n                      'Content-Type': 'multipart/form-data'\n                    }\n                  }).then(res => {\n                    return {\n                      success: 1,\n                      file: {\n                        url: res.data\n                        // any other image data you want to store, such as width, height, color, extension, etc\n                      }\n                    };\n                  });\n                }\n              }\n            }\n          }\n        },\n\n        onChange: () => {\n          console.log(\"onchange e girdi\");\n          this.saveEditorData();\n          this.extendedDebounceHandler();\n        }\n      });\n    }\n    SaveDraft() {\n      // tslint:disable-next-line:prefer-const\n      let noteId = localStorage.getItem('noteId');\n      //  this.saveEditorData();\n      const images = $('img').map(function () {\n        return $(this).attr('src').toString();\n      });\n      for (let i = 0; i < images.length; i++) {\n        this.imageList.push(images[i].toString());\n      }\n      // $('img').map();\n      // this.imageList.push($('img').prop('src'));\n      // for (let i = 0; i < imgArray.length; i++) {\n      //   this.noteToInsert.photos[i] = imgArray[i];\n      //     }\n      // console.log('photooo ' + this.noteToInsert.photos[0]);\n      // this.noteToInsert.photos.push();\n      // this.noteToInsert.categoryId = this.selectedOption;\n      this.noteToInsert.userId = this.userId;\n      this.noteToInsert.photos = this.imageList;\n      this.noteToInsert.isDraft = true;\n      this.noteToInsert.id = +noteId;\n      this.noteToInsert.text = this.HtmlData;\n      this.noteToInsert.rawText = this.editorData;\n      //console.log(\"this.noteToInsert.rawText : \" + this.editorData);\n      // this.noteToInsert.tags = this.tags;\n      // console.log('tags : ' + this.tags);\n      this.noteService.updateNote(this.noteToInsert).subscribe(data => {\n        //this.router.navigate(['/usernotes']);\n        //console.log('successed to update note');\n        this.openSnackBarDraft();\n      }, error => {\n        console.log('failed to update note');\n      });\n    }\n    ngOnDestroy() {\n      localStorage.removeItem('noteId');\n      //localStorage.removeItem('editNoteId');\n    }\n    // detectEditorChanges(): Observable <any> {\n    //   return new Observable(observer => {\n    //     const editorDom = document.querySelector('#editor-js');\n    //     const config = { attributes: true, childList: true, subtree: true };\n    //     this.editorObserver = new MutationObserver((mutation) => {\n    //       observer.next(mutation);\n    //     })\n    //     this.editorObserver.observe(editorDom, config);\n    //   })\n    // }\n    onSubmit() {\n      // tslint:disable-next-line:prefer-const\n      let noteId = localStorage.getItem('noteId');\n      const images = $('img').map(function () {\n        return $(this).attr('src').toString();\n      });\n      for (let i = 0; i < images.length; i++) {\n        this.imageList.push(images[i].toString());\n      }\n      //this.saveEditorData();\n      // console.log(this.tagList + ' fskdfs');\n      // $('img').map();\n      // this.imageList.push($('img').prop('src'));\n      // for (let i = 0; i < imgArray.length; i++) {\n      //   this.noteToInsert.photos[i] = imgArray[i];\n      //     }\n      // console.log('photooo ' + this.noteToInsert.photos[0]);\n      // this.noteToInsert.photos.push();\n      //this.noteToInsert.categoryId = this.selectedOption;\n      this.noteToInsert.userId = this.userId;\n      this.noteToInsert.photos = this.imageList;\n      this.noteToInsert.isDraft = false;\n      this.noteToInsert.tags = this.tagList;\n      this.noteToInsert.text = this.HtmlData;\n      this.noteToInsert.rawText = this.editorData;\n      this.noteToInsert.id = +noteId;\n      console.log(\"this.noteToInsert.text = \" + this.HtmlData);\n      //  console.log(\"*editordata : \" + this.editorData);\n      //  console.log(\"*parseddata : \" + this.parsedData);\n      // console.log('tags : ' + this.tags);\n      this.noteService.updateNote(this.noteToInsert).subscribe(data => {\n        console.log('success to update note');\n        localStorage.setItem('editNoteId', this.noteId);\n      }, error => {\n        console.log('failed to update note');\n      });\n      this.router.navigate(['/createtags']);\n    }\n    openSnackBar() {\n      this._snackBar.openFromComponent(SnackbarComponent, {\n        duration: this.durationInSeconds * 1000,\n        verticalPosition: 'top'\n      });\n    }\n    openSnackBarDraft() {\n      this._snackBar.openFromComponent(SnackbarComponent, {\n        duration: this.durationInSeconds * 1000,\n        verticalPosition: 'top'\n      });\n    }\n    getIPAddress() {\n      this.httpClient.get(\"http://api.ipify.org/?format=json\").subscribe(res => {\n        this.noteToInsert.IPAddress = res.ip;\n        console.log(\"idadress : \" + this.noteToInsert.IPAddress);\n      });\n    }\n  }\n  _defineProperty(CreatenoteComponent, \"\\u0275fac\", function CreatenoteComponent_Factory(t) {\n    return new (t || CreatenoteComponent)(i0.ɵɵdirectiveInject(i1.NoteService), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.MatSnackBar), i0.ɵɵdirectiveInject(i4.HttpClient), i0.ɵɵdirectiveInject(i5.Router));\n  });\n  _defineProperty(CreatenoteComponent, \"\\u0275cmp\", /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreatenoteComponent,\n    selectors: [[\"app-createnote\"]],\n    decls: 8,\n    vars: 0,\n    consts: [[\"id\", \"editForm\", 1, \"example-container\", 3, \"ngSubmit\"], [\"editForm\", \"ngForm\"], [1, \"articleEditor\"], [\"id\", \"editor-js\", \"name\", \"text\"], [1, \"row\"], [\"mat-raised-button\", \"\", 1, \"action_btn\", 3, \"ngSubmit\"]],\n    template: function CreatenoteComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0, 1);\n        i0.ɵɵlistener(\"ngSubmit\", function CreatenoteComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelement(3, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"br\");\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"button\", 5);\n        i0.ɵɵlistener(\"ngSubmit\", function CreatenoteComponent_Template_button_ngSubmit_6_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵtext(7, \" Post \");\n        i0.ɵɵelementEnd()()();\n      }\n    },\n    styles: [\"ngc-float-button[_ngcontent-%COMP%]{top:300px;left:200px;position:absolute}#textarea[_ngcontent-%COMP%]{background:rgba(255,255,255,.95);box-shadow:0 2px 2px #ffffff26;color:#000;font-size:16px;width:100%}.example-container[_ngcontent-%COMP%]{display:flex;flex-direction:column}.example-container[_ngcontent-%COMP%] > input[_ngcontent-%COMP%]{width:100%}.action_btn[_ngcontent-%COMP%]{width:300px;margin:0 auto}\"]\n  }));\n  return CreatenoteComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}