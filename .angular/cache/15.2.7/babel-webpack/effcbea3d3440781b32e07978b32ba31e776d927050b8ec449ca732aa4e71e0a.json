{"ast":null,"code":"import _defineProperty from \"C:/Users/Fatih Furkan Arslan/Desktop/Github/BlogProject-SPA/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Authorization': 'Bearer ' + localStorage.getItem('token')\n  }).set('Content-type', 'application/json')\n};\nconst httpOptionsFormData = {\n  headers: new HttpHeaders({\n    'Authorization': 'Bearer ' + localStorage.getItem('token')\n  }).set('content', 'formData')\n};\nexport let CategoryService = /*#__PURE__*/(() => {\n  class CategoryService {\n    constructor(http) {\n      _defineProperty(this, \"http\", void 0);\n      _defineProperty(this, \"apiUrl\", environment.apiUrl + 'category/');\n      this.http = http;\n    }\n    getCategories() {\n      return this.http.get(this.apiUrl + 'getcategories', httpOptions);\n    }\n    getCategory(categoryId) {\n      return this.http.get(this.apiUrl + 'getcategory/' + categoryId, httpOptions);\n    }\n    insertCategory(categoryToInsert) {\n      return this.http.post(this.apiUrl + 'insert', categoryToInsert, httpOptionsFormData);\n    }\n    deleteCategory(categoryId) {\n      return this.http.delete(this.apiUrl + 'delete/' + categoryId, httpOptions);\n    }\n    updateCategory(category) {\n      return this.http.put(this.apiUrl + 'update', category, httpOptionsFormData);\n    }\n  }\n  _defineProperty(CategoryService, \"\\u0275fac\", function CategoryService_Factory(t) {\n    return new (t || CategoryService)(i0.ɵɵinject(i1.HttpClient));\n  });\n  _defineProperty(CategoryService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CategoryService,\n    factory: CategoryService.ɵfac,\n    providedIn: 'root'\n  }));\n  return CategoryService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}