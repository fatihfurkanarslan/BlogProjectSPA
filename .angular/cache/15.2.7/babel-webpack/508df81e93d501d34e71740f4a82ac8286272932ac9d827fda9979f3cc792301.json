{"ast":null,"code":"import _defineProperty from \"C:/Users/Fatih Furkan Arslan/Desktop/Github/BlogProject-SPA/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { EventEmitter } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { ProfileService } from './profile.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./profile.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Authorization': 'Bearer ' + localStorage.getItem('token')\n  }).set('Content-type', 'application/json')\n};\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, profileService) {\n      _defineProperty(this, \"http\", void 0);\n      _defineProperty(this, \"profileService\", void 0);\n      _defineProperty(this, \"user\", {});\n      _defineProperty(this, \"currentUserSource\", new ReplaySubject(1));\n      _defineProperty(this, \"currentUser$\", this.currentUserSource.asObservable());\n      _defineProperty(this, \"authUrl\", environment.apiUrl + 'auth/');\n      _defineProperty(this, \"decodedToken\", void 0);\n      _defineProperty(this, \"jwtHelper\", new JwtHelperService());\n      _defineProperty(this, \"getLoggedInPhoto\", new EventEmitter());\n      _defineProperty(this, \"getLoggedInActive\", new EventEmitter());\n      this.http = http;\n      this.profileService = profileService;\n    }\n    login(model) {\n      return this.http.post(this.authUrl + 'login', model).pipe(map(response => {\n        const token = response;\n        if (token) {\n          // localStorage.setItem('token', user.token);\n          // localStorage.setItem('user', JSON.stringify(user.user));\n          localStorage.setItem('token', JSON.stringify(token));\n          this.currentUserSource.next(token);\n          this.decodedToken = this.jwtHelper.decodeToken(token);\n          // this.fireIsLoggedIn.emit(user);\n          // tslint:disable-next-line:prefer-const\n          let userId = this.decodedToken.nameid;\n          this.profileService.getUser(userId).subscribe(result => {\n            this.user = result;\n            // emit kullanılabilir refresh yapmadan bağımsız componentlar için\n            this.getLoggedInPhoto.emit(this.user.photoUrl);\n            this.getLoggedInActive.emit(this.user.isActive);\n          }, error => {\n            console.log('user data fetch failed.');\n          });\n        }\n      }));\n    }\n    setCurrentUser(token) {\n      this.currentUserSource.next(token);\n    }\n    loginCheck() {\n      // tslint:disable-next-line:prefer-const\n      let token = localStorage.getItem('token');\n      this.decodedToken = this.jwtHelper.decodeToken(token);\n      // this.fireIsLoggedIn.emit(user);\n      // tslint:disable-next-line:prefer-const\n      let userId = this.decodedToken.nameid;\n      this.profileService.getUser(userId).subscribe(result => {\n        this.user = result;\n        // emit kullanılabilir refresh yapmadan bağımsız componentlar için\n        this.getLoggedInPhoto.emit(this.user.photoUrl);\n        this.getLoggedInActive.emit(this.user.isActive);\n      }, error => {\n        console.log('user data fetch failed.');\n      });\n    }\n    register(model) {\n      return this.http.post(this.authUrl + 'register', model);\n    }\n    activateUser(id) {\n      return this.http.get(this.authUrl + 'activateuser/' + id, httpOptions);\n    }\n    // getEmitter() {\n    //   return this.fireIsLoggedIn;\n    // }\n    loggedIn() {\n      const token = localStorage.getItem('token');\n      return !this.jwtHelper.isTokenExpired(token);\n    }\n    logOut() {\n      localStorage.removeItem('token');\n      this.currentUserSource.next(null);\n    }\n  }\n  _defineProperty(AuthService, \"\\u0275fac\", function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ProfileService));\n  });\n  _defineProperty(AuthService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  }));\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}