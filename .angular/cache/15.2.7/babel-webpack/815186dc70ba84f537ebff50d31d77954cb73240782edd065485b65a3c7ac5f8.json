{"ast":null,"code":"import _defineProperty from \"C:/Users/Fatih Furkan Arslan/Desktop/Github/BlogProject-SPA/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { environment } from 'src/environments/environment';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Cache-Control': 'no-cache',\n    'Pragma': 'no-cache',\n    'Expires': 'Sat, 01 Jan 2000 00:00:00 GMT',\n    'Authorization': 'Bearer ' + localStorage.getItem('token')\n  })\n};\n// const httpOptions = {\n//   headers: new HttpHeaders({\n//     'Authorization': 'Bearer ' + localStorage.getItem('token')\n//   }).set('content', 'application/json')\n// };\nexport let CommentService = /*#__PURE__*/(() => {\n  class CommentService {\n    constructor(http) {\n      _defineProperty(this, \"http\", void 0);\n      _defineProperty(this, \"apiUrl\", environment.apiUrl + 'comment/');\n      this.http = http;\n    }\n    getComments(noteId) {\n      return this.http.get(this.apiUrl + 'getcomments/' + noteId, httpOptions);\n    }\n    getComment(commentId) {\n      return this.http.get(this.apiUrl + 'getcomment/' + commentId, httpOptions);\n    }\n    insertComment(comment) {\n      return this.http.post(this.apiUrl + 'insert', comment, httpOptions);\n    }\n    deleteComment(commentId) {\n      return this.http.delete(this.apiUrl + 'delete/' + commentId, httpOptions);\n    }\n    updateComment(comment) {\n      return this.http.put(this.apiUrl + 'update', comment);\n    }\n  }\n  _defineProperty(CommentService, \"\\u0275fac\", function CommentService_Factory(t) {\n    return new (t || CommentService)(i0.ɵɵinject(i1.HttpClient));\n  });\n  _defineProperty(CommentService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommentService,\n    factory: CommentService.ɵfac,\n    providedIn: 'root'\n  }));\n  return CommentService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}